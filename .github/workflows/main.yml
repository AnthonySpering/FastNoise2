name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types: [published]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:  
  ci-matrix:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Win32-MSVC
            cmake_options: -A Win32
          - os: windows-latest
            name: Win64-MSVC
            cmake_options: -A x64
          - os: ubuntu-latest
            name: Linux64-GCC
            cmake_options: -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64
          - os: macos-latest
            name: MacOS64-Clang
            cmake_options: -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64
    steps:                
    - name: 'Install OpenGL & xorg'
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install libgl1-mesa-dev xorg-dev
            
    - name: 'Checkout' 
      uses: actions/checkout@v2
   
    - name: 'CMake Build Debug'
      run: cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/debug -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install/FastNoise2" -DFASTNOISE2_NOISETOOL=OFF -DFASTNOISE2_TESTS=OFF ${{ matrix.cmake_options }}
   
    - name: 'CMake Install Debug'
      run: cmake --build ${{ github.workspace }}/debug --config Debug --target install --parallel 4
   
    - name: 'CMake Build Release'
      run: cmake -S ${{ github.workspace }} -B ${{ github.workspace }}/release -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install/FastNoise2" -DFASTNOISE2_NOISETOOL=ON -DFASTNOISE2_TESTS=ON ${{ matrix.cmake_options }}
   
    - name: 'CMake Install Release'
      run: cmake --build ${{ github.workspace }}/release --config Release --target install --parallel 4
    
    - name: 'Upload artifact'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.name }}
        path: ${{ github.workspace }}/install/
   
    - name: 'Zip artifacts'
      if: github.event_name == 'release'
      uses: papeloto/action-zip@v1
      with:
        files: install/
        recursive: true
        dest: ${{ matrix.name }}.zip
        
    - name: 'Upload release artifacts'
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ github.workspace }}/${{ matrix.name }}.zip
        asset_name: FastNoise2-${{ matrix.name }}.zip
        tag: ${{ github.ref }}
 
  update-tag:
    runs-on: ubuntu-latest
    steps:      
    - name: 'Checkout' 
      uses: actions/checkout@v2
      
    - name: 'Read CMakeLists.txt'
      id: file-read
      uses: andstor/file-reader-action@v1
      with:
        path: "CMakeLists.txt"
        
    - name: 'Extract CMake version'
      uses: actions-ecosystem/action-regex-match@v2
      id: regex-match
      with:
        text: ${{ steps.file-read.outputs.contents }}
        regex: 'project\s*\(\s*FastNoise2.*VERSION\s*([\d|\.]+)\s*\)'
        
    - name: 'Check alpha version'
      uses: actions-ecosystem/action-regex-match@v2
      id: alpha-regex
      with:
        text: -alpha${{ steps.regex-match.outputs.group1 }}
        regex: '(-alpha)0\.'
     
    - name: 'Check tag exists'
      id: tag-exists
      run: |
        git show-ref --tags v${{ steps.regex-match.outputs.group1 }}${{ steps.alpha-regex.outputs.group1 }}
        echo "::set-output name=tag-ref::$(git show-ref --tags v${{ steps.regex-match.outputs.group1 }}${{ steps.alpha-regex.outputs.group1 }})"
        
    - run: echo ${{ steps.tag-exists.outputs.tag-ref }}
        
      
